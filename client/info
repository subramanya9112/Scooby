import Phaser from 'phaser'

export default class GameScene extends Phaser.Scene {
    player: Phaser.Physics.Arcade.Sprite | undefined;
    cursors: Phaser.Types.Input.Keyboard.CursorKeys | undefined;
    walls: Phaser.Physics.Arcade.StaticGroup | undefined;

    constructor() {
        super('gameScene')
    }

    preload() {
        // this.load.setBaseURL('http://labs.phaser.io')

        // this.load.image('logo', 'assets/sprites/phaser3-logo.png')
        this.load.image('image', 'a.png')
        this.load.image('player', 'player.png')
    }

    init() {
        this.cursors = this.input.keyboard.createCursorKeys();
    }

    create() {
        this.player = this.physics.add.sprite(150, 150, 'player').setScale(1).setSize(64, 32).setOffset(0, 32);

        // logo.setPosition(this.scale.width / 2, this.scale.height / 2).setOrigin(0.5);

        // this.input.on('pointermove', (pointer: PointerEvent) => {
        //     let angle = Math.atan2(logo.y - pointer.y, logo.x - pointer.x);
        //     logo.rotation = angle;
        //     console.log(angle)
        // });

        let width = this.textures.get('image').get(0).width;
        let height = this.textures.get('image').get(0).height;
        this.walls = this.physics.add.staticGroup();
        for (let i = 0; i < 2; i++) {
            for (let j = 0; j < 20; j++) {
                this.walls.get(width * j * 2, 200 * i, 'image', 0)
                    .setScale(2)
                    .setOrigin(0, 0)
                    .setSize(64, 64)
                    .setOffset(16, 48);
            }
        }

        this.physics.add.collider(this.player, this.walls);
    }

    update(time: number, delta: number): void {
        let speed = 200;
        if (this.cursors && this.player) {
            if (this.cursors.left.isDown) {
                this.player.setVelocityX(-speed);
            } else if (this.cursors.right.isDown) {
                this.player.setVelocityX(speed);
            } else {
                this.player.setVelocityX(0);
            }

            if (this.cursors.up.isDown) {
                this.player.setVelocityY(-speed);
            } else if (this.cursors.down.isDown) {
                this.player.setVelocityY(speed);
            } else {
                this.player.setVelocityY(0);
            }
        }

        // @ts-ignore
        this.children.each((child: Phaser.Physics.Arcade.Sprite) => {
            child.setDepth(child.y);
        });
    }
}
